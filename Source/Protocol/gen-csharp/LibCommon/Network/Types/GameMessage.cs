/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace LibCommon.Network.Types
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GameMessage : TBase
  {

    /// <summary>
    /// 
    /// <seealso cref="MessageType"/>
    /// </summary>
    public MessageType EventType { get; set; }

    public string Content { get; set; }

    public string NetworkId { get; set; }

    public GameMessage() {
    }

    public GameMessage(MessageType eventType, string content, string networkId) : this() {
      this.EventType = eventType;
      this.Content = content;
      this.NetworkId = networkId;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_eventType = false;
      bool isset_content = false;
      bool isset_networkId = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              EventType = (MessageType)iprot.ReadI32();
              isset_eventType = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Content = iprot.ReadString();
              isset_content = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              NetworkId = iprot.ReadString();
              isset_networkId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_eventType)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_content)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_networkId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GameMessage");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "eventType";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)EventType);
      oprot.WriteFieldEnd();
      field.Name = "content";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Content);
      oprot.WriteFieldEnd();
      field.Name = "networkId";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(NetworkId);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GameMessage(");
      sb.Append("EventType: ");
      sb.Append(EventType);
      sb.Append(",Content: ");
      sb.Append(Content);
      sb.Append(",NetworkId: ");
      sb.Append(NetworkId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
